stages:          # List of stages for jobs, and their order of execution
  - update_requirements
  - test
  - build
  - deploy

update-requirements:
  stage: update_requirements
  image: python:3.12
  before_script:
    - apt-get update && apt-get install -y docker.io
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    - echo "Checking for changes in requirements.txt..."

    # - git checkout $CI_COMMIT_REF_NAME
    # - echo "Setting up virtual environment"
    # - python -m venv venv
    # - source venv/bin/activate
    # - echo "Installing current dependencies"
    # - pip install --upgrade pip
    # - pip install -r requirements.txt
    # - echo "Updating requirements.txt"
    # - pip freeze > requirements.txt
    # - echo "Committing and pushing changes"
    # - git config --global user.name "GitLab CI"
    # - git config --global user.email "ci@gitlab.kit.edu"
    # - git add requirements.txt
    # - git commit -m "Update requirements.txt"
    # - git remote set-url origin https://oauth2:${GITLAB_ACCESS_TOKEN}@gitlab.kit.edu/haoran.yu/mf-system.git
    # - git push origin $CI_COMMIT_REF_NAME

test:   
  stage: test
  image: python:3.12
  before_script:
    - apt-get update && apt-get install -y docker.io
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script: 
    - echo "Running test..."
    # - python -m venv venv
    # - source venv/bin/activate
    # - echo "Installing dependencies"
    # - pip install --upgrade pip
    # - pip install -r requirements.txt  
    # - pip install pytest
    # - echo "Running pytest tests"
    # - pytest 

build:
  stage: build
  tags:
    - windows  # This should match a Windows runner tag
  script:
    - echo "Running build..."
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install pyinstaller
    - pyinstaller --onefile --noconsole --icon=resources/icon.ico src/mf_system/main.py
    - ls dist  # List the files in the dist folder to check if main.exe exists
  artifacts:
    paths:
      - dist/main  # Save the Linux executable
  only:
    - main
    
deploy:
  stage: deploy
  image: alpine:latest  # Lightweight image for deployment
  script:
    - echo "Running deploy..."
  #   - apk add --no-cache openssh  # Install SSH
  #   - mkdir -p ~/.ssh
  #   - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  #   - chmod 600 ~/.ssh/id_rsa
  #   - ssh-keyscan $DEPLOY_SERVER >> ~/.ssh/known_hosts
  #   - scp dist/main.exe user@$DEPLOY_SERVER:/path/to/deploy
  # only:
  #   - main  # Only deploy from the main branch
  # environment:
  #   name: production
  #   url: https://your-app-url.com

